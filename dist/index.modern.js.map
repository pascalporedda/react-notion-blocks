{"version":3,"file":"index.modern.js","sources":["../src/Blocks/BulletedListBlock.tsx","../src/Components/ConditionalWrapper.tsx","../src/Blocks/RichTextBlock.tsx","../src/Blocks/HeadingBlock.tsx","../src/Blocks/ListBlockItem.tsx","../src/Blocks/NumberedListBlock.tsx","../src/Blocks/ToggleBlock.tsx"],"sourcesContent":["import React from 'react';\n\nimport { BulletedListBlockProps } from '../types';\n\nexport const BulletedListBlock: React.FC<\n  React.PropsWithChildren<BulletedListBlockProps>\n> = ({ children }) => {\n  return <ul>{children}</ul>;\n};\n","import React from 'react';\n\nimport { ConditionalWrapperProps, RenderType } from '../types';\n\nexport const escapedNewLineToLineBreakTag = (string: string): RenderType => {\n  return string.split('\\n').map((item, index) => {\n    return index === 0 ? item : [<br key={index} />, item];\n  });\n};\n\nexport const ConditionalWrapper = ({\n  condition,\n  wrapper,\n  children,\n}: ConditionalWrapperProps): any => (condition ? wrapper(children) : children);\n","import React from 'react';\n\nimport {\n  ConditionalWrapper,\n  escapedNewLineToLineBreakTag,\n} from '../Components/ConditionalWrapper';\nimport { RichTextBlockProps } from '../types';\n\nexport const RichTextBlock: React.FC<\n  React.PropsWithChildren<RichTextBlockProps>\n> = ({ text, as }) => {\n  const displayComponent = as || 'plain';\n  const textContent = text.map((textPart) => {\n    return (\n      <ConditionalWrapper\n        key={textPart.plain_text}\n        condition={textPart.annotations.bold}\n        wrapper={(childs) => <b>{childs}</b>}\n      >\n        <ConditionalWrapper\n          condition={textPart.annotations.italic}\n          wrapper={(childs) => <i>{childs}</i>}\n        >\n          <ConditionalWrapper\n            condition={textPart.annotations.strikethrough}\n            wrapper={(childs) => <del>{childs}</del>}\n          >\n            <ConditionalWrapper\n              condition={textPart.annotations.underline}\n              wrapper={(childs) => <u>{childs}</u>}\n            >\n              <ConditionalWrapper\n                condition={textPart.annotations.code}\n                wrapper={(childs) => <code>{childs}</code>}\n              >\n                {escapedNewLineToLineBreakTag(textPart.plain_text)}\n              </ConditionalWrapper>\n            </ConditionalWrapper>\n          </ConditionalWrapper>\n        </ConditionalWrapper>\n      </ConditionalWrapper>\n    );\n  });\n\n  switch (displayComponent) {\n    case 'p':\n      return <p>{textContent}</p>;\n    case 'div':\n      return <div>{textContent}</div>;\n    case 'span':\n      return <span>{textContent}</span>;\n    case 'plain':\n    default:\n      return <React.Fragment>{textContent}</React.Fragment>;\n  }\n};\n","import React from 'react';\n\nimport { HeadingBlockProps } from '../types';\n\nimport { RichTextBlock } from './RichTextBlock';\n\nexport const HeadingBlock: React.FC<\n  React.PropsWithChildren<HeadingBlockProps>\n> = ({ text, type }) => {\n  const content = <RichTextBlock as={'plain'} text={text} />;\n\n  switch (type) {\n    case 'heading_1':\n    default:\n      return <h1>{content}</h1>;\n    case 'heading_2':\n      return <h2>{content}</h2>;\n    case 'heading_3':\n      return <h3>{content}</h3>;\n  }\n};\n","import React from 'react';\n\nimport { ListBlockItemProps } from '../types';\n\nimport { RichTextBlock } from './RichTextBlock';\n\nexport const ListBlockItem: React.FC<\n  React.PropsWithChildren<ListBlockItemProps>\n> = ({ text, children }) => {\n  // TODO: A list block item can contain more children\n  return (\n    <li>\n      <RichTextBlock as={'plain'} text={text} />\n      {children}\n    </li>\n  );\n};\n","import React from 'react';\n\nexport const NumberedListBlock: React.FC<React.PropsWithChildren<{}>> = ({\n  children,\n}) => {\n  return <ol>{children}</ol>;\n};\n","import React from 'react';\nimport { Disclosure } from '@headlessui/react';\n\nimport { ToggleBlockProps } from '../types';\n\nimport { RichTextBlock } from './RichTextBlock';\n\n// TODO: we need options to handle an open, close state manually / programmatically and a way to style the button I guess\nexport const ToggleBlock: React.FC<React.PropsWithChildren<ToggleBlockProps>> =\n  ({ text, children }) => {\n    return (\n      <Disclosure>\n        <Disclosure.Button>\n          <RichTextBlock text={text} />\n        </Disclosure.Button>\n        <Disclosure.Panel>{children}</Disclosure.Panel>\n      </Disclosure>\n    );\n  };\n"],"names":["BulletedListBlock","children","React","escapedNewLineToLineBreakTag","string","split","map","item","index","key","ConditionalWrapper","condition","wrapper","RichTextBlock","text","as","displayComponent","textContent","textPart","plain_text","annotations","bold","childs","italic","strikethrough","underline","code","Fragment","HeadingBlock","type","content","ListBlockItem","NumberedListBlock","ToggleBlock","Disclosure","Button","Panel"],"mappings":"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"}